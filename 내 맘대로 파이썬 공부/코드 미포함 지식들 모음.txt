1. 모듈 vs 클래스
클래스 : 사용자가 직접 개체 선언 및 객체 멤버 구성 가능. 클래스의 범위와 용도 설정 가능. 인스턴스화 및 인터페이스 구현가능. 즉 멤버를 용도에 맞게 변경해서 세부적으로 사용가능.
클래스 내부 멤버들은 클래스를 구현하는 동안에만 수명 지속
모듈 : 누군가 이미 완성시킨 것. 인스턴스화 불가능. 인터페이스 구현 불가능=변경불가능. 프로그램 수명동안 모듈 내부멤버에 접근 가능.

2. copy (deepcopy, copy) :
deep은 id값까지 변경. copy는 shallow 카피로 굳이 모듈을 사용할 필요없음.
슬라이스해서 가져오면 새로운 id값이 생성되긴하지만 슬라이스된 내용물은 여전히 같은id값을 유지하기때문에 얕은 카피임
id값이 같다는건 변경을 가할시 같은 id주소를 가지는 값은 모두 변경됨을 뜻함. 그래서 값은 같지만 완전히 새로운 객체를 만들고자할때 deepcopy를 씀.

3. self의 이해
self란 결국 instance주솟값을 인자로 사용한다는 뜻이므로 method(self)일 경우
class를 instance에 할당하고 instance.method()할 경우 자동으로 intance값을 넘겨주므로
오류가 발생하지 않는 것이고, class.method()할 경우엔 instance주솟값이 없으므로 오류 발생..
method()라면 애초에 self가 없으므로 class.method()해도 오류가 발생하지 않는..

4. itertools의 combinations와 permutations.
combinations는 안써봤으나 permutations는 id값을 기준으로 동작하는듯¶
예를 들어 [1,3,3]에서 pemutations한다면 3의 위치끼리만 바뀌어도 다른 순열로 취급함
