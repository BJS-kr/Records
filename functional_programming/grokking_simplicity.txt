1. 액션: 실행 시점이나 횟수, 혹은 둘 다에 의존 -> 부수 효과가 존재. 순수하지 impure function
2. 계산: 같은 입력값을 가지고 계산하면 항상 같은 결과. 동시 실행, 반복 실행, 과거와 미래의 실행 모두 아무런 영향이 없어야함. pure function
3. 데이터: 이벤트에 대해 기록한 사실. 실행되지 않아도 의미가 존재.

대표적으로 DB조회는 액션임. 시점에 따라 DB에 적재되어있는 데이터가 달라지기때문. 그러나 일단 가져온 후에는 데이터임

함수형 프로그래밍이라고 할지라도 부수효과가 없다는 것은 불가능하다.
부수효과는 함수의 리턴 값 외의 모든 동작을 뜻함. 예를 들어, 이메일 전송 함수를
부수효과 없이 작성하는 것은 불가능함. '이메일 전송'이라는 동작을 리턴할 수 없기 때문.

그래서 flow가 중요함. flow에 포함되는 모든 것은 시점에 영향을 받는다고 볼 수 있음.
즉, 모두 액션임. 그러나 모든 프로그램은 겉으로 볼땐 액션임(사람은 프로그래밍이 아니더라도 모두 액션을 기반으로 생각함). 계산은 무의식중에 머릿속에서 스킵되기 때문. 
액션에서 데이터와 계산을 분리해 내는 것이 중요. 무한정 나누라는 것이 아님! 언제 멈춰야할지를 알아야함.
멈추는 기준은 '어렵지 않다'라고 느껴지는 때임. 충분히 분리되면 각 요소는 간단해짐.

보통 데이터부터 분리해야 함. 데이터가 분리되면 자동으로 계산이 추상화됨(액션과 계산 분리).
그냥 액션하면 되지 데이터와 계산을 분리하는 이유는?
1. 재사용성이 높아짐(계산을 조합해 여러가지 함수 제작 가능)
2. 오류 해결이 쉬워짐(test도 용이해짐. ex) '이메일 전송'을 테스트하는 것은 어려움. 그러나 이메일 목록(데이터)를 테스트하는 것은 쉬움)
3. 순수함수와 부수효과함수를 구분하기 쉬워짐. 즉 분리된 관리가 용이해짐. 도메인 모델 구성에도 도움되려나?
4. 불필요한 액션을 발견할 수 있음. 액션은 적으면 적을 수록 좋음(계산과 데이터가 액션에서 빠져나갈수록 예측가능성 증가). 최대한 계산으로 치환되어야 함. 액션은 시스템을 불안정하게 만드는 원인임.

이러한 분리가 좋은 이유? '모델(도메인 모델 아님)'을 구성할 수 있음. 즉 풍부하게 액션, 계산, 데이터가 나뉘어있다면 그것을 어떻게 분리할지도 명확해짐.
각 단계별로 구분하는 것이 좋음. 액션은 순서가 있음. 동시에 실행되도 상관없는 액션끼리 묶어 단계를 구성.
예를 들어, d는 a,b,c가 일어난 후에 일어나야 하고 abc는 서로에게 영향이 없다면 1단계: abc 2단계: d임.

책의 예를 따르면, 반복 수행자체를 계산으로 만드는것이 아니라 단일 항목에 대한 수행을 반복으로 수행하는 것이 좋음
예를 들어, 배열에 대한 함수가 아니라 배열의 요소에 대한 계산을 만들어서 배열.forEach(계산)이 됨. 아마 단일항목에 대한 실행은 단일 및 다수 모두에게 실행가능하지만 다수에 대한 계산은 단일항목에는 실행하지 못하기 때문으로 생각됨.

데이터와 계산, 액션은 과정상으로도 분리할 수 있음. 예를 들어, 메일을 보내는 순간에 이메일 본문을 연산해서 보내는 것이 아니라
메일 내용을 미리 모두 계산하여 list로 만들어두고, 순차적으로 메일보내기 액션 실행. 데이터 구성부터 하는 것에 익숙해져야한다고 함.
이 부분에서 보통 제기되는 의문이 모든 요소를 미리 만들어두는 것은 메모리 낭비가 아닌가하는 것인데, 이에 대해 저자(eric normand)는 '신경쓸 필요 없다'고 일축하고 있다.
최적화를 프로그램을 실행시키기도 전에 고려하는 것은 어리석은 일이며(메모리는 과거에 비해 비교할 수 없을 만큼 커졌고, 계속해서 커지는 중), 심지어 배열요소가 수십만개에 달하더라도 아무지체없이 수행될 수도 있음.
만약 정말로 메모리문제가 발생한다면, 예를 들어 목록을 20개씩 나눠서 만드는 등 상황에 맞는 최적화를 실행하면 됨.
일단 설계가 잘 되어있다면 최적화는 간단함.

최종적으로, 계산들 + 부수효과 함수(액션)가 조합되어 하나의 액션이 됨.

액션은 퍼져나가기 쉬움. 예를 들어, 액션을 사용하는 함수는 액션임. 보통 함수는 연관되어있으므로 모든 코드가 액션이 될 가능성이 있으며, 액션 계산 데이터를 분리하지 않은 코드는 보통 모든 코드가 액션임.
액션을 덜 사용하기는 원래 어렵지만, 이를 가능하게 해주는 것이 아키텍처임(의존성이 무조건 외부로만 퍼져나가므로 내부에는 데이터와 계산만 배치시키면 알아서 분리됨)


